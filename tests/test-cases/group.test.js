import { Matrix } from "../../modules/matrix";
import { FiniteGroup } from "../../modules/finitegroup";
import { FiniteFieldRegistry } from "../../modules/finitefield";

test ('Generate Z/2Z multiplicatively', () => {
    let generators = []; 
    let g1 = new Matrix(Number.MAX_SAFE_INTEGER, 1); 
    let g2 = Matrix.identity(Number.MAX_SAFE_INTEGER, 1); 


    g1.contents = [[-1]];
    console.log(g1.mult(g1));
    // console.log(g1.invert().contents); 
    generators.push(g1); 

    let group = new FiniteGroup(generators, 1); // Z/2Z generated by GL(Z), so "infinite order"; 

    // console.log(group.elems); 

    expect(group.order == 2).toBe(true);
    expect(FiniteGroup.assertClosed(group)).toBe(true);
    expect(FiniteGroup.assertInverse(group)).toBe(true);
    expect(FiniteGroup.assertIdentityExist(group)).toBe(true);
})



test ('Generate Z/5Z multiplicatively using integers over Z/11Z', () => {
    let g1 = new Matrix(11, 1); 
    g1.contents = [[4]]; 
    let generators = [];
    generators.push(g1);  

    let group = new FiniteGroup(generators, 11); 

    expect(group.order).toBe(5); 
    expect(FiniteGroup.assertClosed(group)).toBe(true);
    expect(FiniteGroup.assertInverse(group)).toBe(true);
    expect(FiniteGroup.assertIdentityExist(group)).toBe(true);


})

// first non-trivial test 
test ('Generate the Dihedral group D4, using 2x2 matrices over GL2(Z)', () => {
    let generators = [];

    let g1 = new Matrix(Number.MAX_SAFE_INTEGER,2);
    let g2 = new Matrix(Number.MAX_SAFE_INTEGER,2);  

    g1.contents = [[0, -1], [1, 0]]; 
    g2.contents = [[1, 0], [0, -1]];

    generators.push(g1); 
    generators.push(g2); 

    let group = new FiniteGroup(generators, Number.MAX_SAFE_INTEGER); 

    expect(group.order).toEqual(8);
    expect(FiniteGroup.assertClosed(group)).toBe(true);
    expect(FiniteGroup.assertInverse(group)).toBe(true);
    expect(FiniteGroup.assertIdentityExist(group)).toBe(true);


}
)


