import { Matrix } from "../../modules/matrix";
import { FiniteGroup, assertClosed, assertIdentityExist, assertInverse} from "../../modules/finitegroup";
import { FiniteFieldRegistry } from "../../modules/finitefield";

test ('Generate Z/2Z multiplicatively', () => {
    let generators = []; 
    let g1 = new Matrix(Number.MAX_SAFE_INTEGER, 1); 
    let g2 = Matrix.identity(Number.MAX_SAFE_INTEGER, 1); 


    g1.contents = [[-1]];
    // console.log(g1.mult(g1));
    // console.log(g1.invert().contents); 
    generators.push(g1); 

    let group = new FiniteGroup(generators, Number.MAX_SAFE_INTEGER, "Z/2Z"); // Z/2Z generated by GL(Z), so "infinite order"; 

    // group.elems.forEach((g) => console.log(g.contents)); 

    expect(group.order == 2).toBe(true);
    expect(assertClosed(group)).toBe(true);
    expect(assertInverse(group)).toBe(true);
    expect(assertIdentityExist(group)).toBe(true);
})



test ('Generate Z/5Z multiplicatively using integers over Z/11Z', () => {
    let g1 = new Matrix(11, 1); 
    g1.contents = [[4]]; 
    let generators = [];
    generators.push(g1);  

    let group = new FiniteGroup(generators, 11, "Z/11Z"); 

    expect(group.order).toBe(5); 
    expect(assertClosed(group)).toBe(true);
    expect(assertInverse(group)).toBe(true);
    expect(assertIdentityExist(group)).toBe(true);


})

// first non-trivial test 
test ('Generate the Dihedral group D4, using 2x2 matrices over GL2(Z)', () => {
    let generators = [];

    let g1 = new Matrix(Number.MAX_SAFE_INTEGER,2);
    let g2 = new Matrix(Number.MAX_SAFE_INTEGER,2);  

    g1.contents = [[0, -1], [1, 0]]; 
    g2.contents = [[1, 0], [0, -1]];

    generators.push(g1); 
    generators.push(g2); 

    let group = new FiniteGroup(generators, Number.MAX_SAFE_INTEGER, "Dihedral D4"); 
    // console.log(group.elems.check()); 


    expect(group.order).toEqual(8);
    expect(assertClosed(group)).toBe(true);
    expect(assertInverse(group)).toBe(true);
    expect(assertIdentityExist(group)).toBe(true);


})

test ('generate the Quaternions Q8 using 2x2 matrices over GL2(Z/3Z)', () => {
    let generators = []; 
    let g1 = new Matrix(3,2);
    let g2 = new Matrix(3,2); 
    g1.contents = [
        [2, 2], 
        [2, 1]];

    g2.contents = [
        [0, 2],
        [1, 0]];
    generators.push(g1); 
    generators.push(g2);     

    let group = new FiniteGroup(generators, 3, "Quaternion Q8"); 

    // group.elems.forEach((g) => console.log(g.contents));

    expect(assertClosed(group)).toBe(true);
    expect(assertInverse(group)).toBe(true);
    expect(assertIdentityExist(group)).toBe(true);
    expect(group.order).toEqual(8);
})

// this is the "real test" 
test ('generate the DP of C2 and SDP of C4, C4 using 4x4 matrices over GL4(Z/5Z)', () => {
    let g1 = new Matrix(5,4); 
    let g2 = new Matrix(5,4); 
    let g3 = new Matrix(5,4); 

    g1.contents = [
        [4,0,0,0], 
        [0,4,0,0], 
        [0,0,1,0],
        [0,0,0,1]
    ]
    
    g2.contents = [
        [1,0,0,0], 
        [0,1,0,0], 
        [0,0,0,4],
        [0,0,1,0]
    ]

    g3.contents = [
        [3,0,0,0], 
        [0,1,0,0], 
        [0,0,0,3], 
        [0,0,3,0]
    ]
    let generators = [g1,g2,g3]; 

    let group = new FiniteGroup(generators, 5, "DP of C2 and SDP(C4,C4)"); 

    // group.elems.forEach((g) => console.log(g.contents));
    expect(assertClosed(group)).toBe(true);
    expect(assertInverse(group)).toBe(true);
    expect(assertIdentityExist(group)).toBe(true);
    expect(group.order).toEqual(32);
})

